import os 
import sys
import glob
import pandas as p
import numpy as np
from weasyprint import HTML
import xml.etree.ElementTree as ET
from jinja2 import Environment, FileSystemLoader
import yaml
import matplotlib.pyplot as plt
import nibabel as nib
import shutil
import datetime
from tensorflow_privacy.privacy.analysis.compute_dp_sgd_privacy_lib import compute_dp_sgd_privacy
from tensorflow_privacy.privacy.analysis.rdp_accountant import compute_rdp
from tensorflow_privacy.privacy.analysis.rdp_accountant import get_privacy_spent
import numpy as np
import matplotlib.pyplot as plt

import logging

logger = logging.getLogger(__name__)


class SyntheticImage:
    @staticmethod
    def build(sm):
        logger.info('Found synthetic images to add to report.')
        sm.synthetic_image_path = os.path.join(sm.project_path,'synthetic','synthetic.jpg')    
    def html(sm):
        return f'''
        <br>
        <div style="text-align: center;">
        <h3>Synthetic Data generated by the GAN.</h3>
        <p>Files for any other train step can be found in the database. <br>
            <br>
            <img src="file:{  sm.synthetic_image_path }" style="height:784px; width:392px;padding-top: 5px;margin-left: auto;
            margin-right: auto">
        </p>
    </div>
    <br> '''

class GANParams:
    @staticmethod
    def build(sm):
        logger.info('Found GAN params to add to report.')
        with open(sm.configuration_path,'r') as f:
            sm.gan_config = yaml.safe_load(f)
        sm.gan_parameters_html = p.DataFrame(sm.gan_config['hp'],index=['Hyper Parameters']).transpose().to_html(justify='center',border=1)
    def html(sm):
        return f'''
        <h3>Parameter Settings GAN.</h3>
        <div style="font-size: 16px; padding: 10px; border:1px;">
            {sm.gan_parameters_html}
        </div>
        <hr>
        '''
class GANLossPlot:
    @staticmethod
    def build(sm):
        logger.info('Found GAN loss plot to add to report.')
        df = p.read_csv(os.path.join(sm.project_path,'training.log'),sep=',')
        epochs = df['epoch']
        
        d_loss = df['d_loss']
        g_loss = df['g_loss']

        plt.plot(epochs.values,d_loss.values, label ='d_loss')
        plt.plot(epochs.values,g_loss.values, label= 'g_loss')

        plt.xlabel('Epochs')
        plt.ylabel('Loss')
        plt.title('GAN Loss')
        plt.legend()
        file = os.path.join(sm.tmp_path,'ganloss.png')
        sm.gan_loss_path = file
        plt.savefig(file)
        plt.close()

    def html(sm):
        return f'''
        <br>
        <div style="padding-top: 190px;">
        <h3>GAN loss visualization</h3>
        <p style="font-weight: lighter;"> A in-depth analysis can be performed using the tensorboard files.
        </p>
        <p> <img src="file:{sm.gan_loss_path }">
        </p>
    </div>
    <br> '''
    
class DPCalc:
    @staticmethod
    def build(sm):
        logger.info('Calculate DP privacy. [currently overwritten]')
        # batch_size = sm.gan_config['hp']['batch_size']
        # noise_multiplier = sm.gan_config['hp']['noise_multiplier']
        # epochs = sm.gan_config['model']['epochs']
        # cardinality = 41000
        # target_delta = 1.0 / cardinality
        # epsilon = np.round(compute_dp_sgd_privacy(cardinality,batch_size,noise_multiplier, epochs, target_delta)[0],3)
        # sm.privacy_epsilon = epsilon
        # sm.privacy_delta = target_delta
    def html(sm):
        return f'''
        <div style="background-color: beige;">
        <h3>Privacy Guarantees</h3>
        <div style="font-size: 16px; padding: 10px; border:1px;">
            Epsilon: <p style="font-weight: bold;">calculate manually</p> <br>
            Delta: <p style="font-weight: bold;"> calculate manually </p>
        </div>
    </div>
    <hr>
        '''

class UnetTable:
    @staticmethod
    def build(sm):
        print('UnetTable')
        result = get_unet_result_df(sm)
        res = result.drop(columns =['truth','synthetic'])
        sm.unet_summary_table_html = res.groupby(['utility_run','dataset']).agg({'Dice Coefficient (F1-Measure)': ['mean', 'min', 'max','count'],'Hausdorff Distance': ['mean', 'min', 'max','count']}).round(3).to_html()
    
    def html(sm):
        return f'''<br>
    <div style='margin-top:100px;'>
        <hr>
        <h2>U-Net</h2>
        <hr>
        <p>This chapter shows the output and behaviour of the Segmentation network which is used to measure the utility
            of the synthetic data.</p>
    </div>
    <hr>
    <div style="background-color: beige;">
        <h3>U-Net Results with Test& Train Dataset</h3>
        <div style="font-size: 16px; padding: 10px; border:1px;">
            { sm.unet_summary_table_html  }
        </div>
    </div>
    <hr>
    <br> '''

class DistancesData:
    @staticmethod
    def build(sm):
        logger.info('Found distances data to add to report.')
        sm.distances_histogram_path = os.path.join(sm.distances_path,'hist.jpg')
        for file in os.listdir(sm.distances_path):
            if 'sample' in file:
                sm.distances_plots_random_paths.append(os.path.join(sm.distances_path,file))
            if 'closest' in file:
                sm.distances_plots__closest_paths.append(os.path.join(sm.distances_path,file))
        


        #sm.distances_table_html =  p.read_csv(os.path.join(sm.distances_path,'dist.csv')).to_html(justify='center',border=1)
    def html(sm):
        html = f'''
        <div>
        <hr>
        <h2>Distances</h2>
        <hr>
        <p>This chapter analyses the distance between the synthetic data and the groun truth.</p>
        </div> 
        <hr>
        <div style="background-color: beige;">
            <h3>Measured Distances</h3>
            <div style="font-size: 16px; padding: 10px; border:1px;">
                Here could be your Advertisement{ sm.distances_table_html  }
            </div>
        </div>
        <hr>
        <p><img src="file:{sm.distances_histogram_path }"></p>
        '''

        html = html + '<h3>Closest Images</h3>'
        for f in sm.distances_plots__closest_paths:
            html = html + f'''<p><img src="file:{f}" style="width:600px;"></p>'''

        html = html + '<hr> <br><h3>Random Images</h3>'
        for f in sm.distances_plots_random_paths:
            html = html + f'''<p><img src="file:{f}" style="width:600px;"></p>'''
        return html

class UnetBrainPlots:
    @staticmethod
    def build(sm):
        logger.info('Generate U-Net brain plots to add to report.')
        results = get_unet_result_df(sm)
        results = results[results['dataset'] == 'test']
        results = results.groupby('utility_run')
        for group in results:
            uname = group[0]
            synthetic_images = group[1]['synthetic']
            truth_images = group[1]['truth']
            for i in range(5):
                filename = os.path.join(sm.tmp_path,'res'+uname+str(i)+'.jpg')
                create_nii_images(truth_images[i],synthetic_images[i],filename)
                sm.unet_test_images_paths.append(filename)

    def html(sm):
        html = ''' 
            <div>
            <hr>
            <h3>U-Net Results with Test Images</h3>
            <p>Some randomly chosen sample outputs.<br>
            Files can be found in the database.
            </p></p>
            <hr>
            </div>
            '''

        for i,f in enumerate(sm.unet_test_images_paths):
            if i == 0:
                html = html + '<div>'
            html = html + f'''
            <p>{f}</p>
                <p> <img src="file:{ f }">
                </p>'''
            if i == len(sm.unet_test_images_paths)-1:
                html = html + '</div>'
        return html
def get_unet_result_df(sm):
    combined = []
    for unet in sm.unet_paths:
        test = xml_collector(os.path.join(unet,'9999','test','results'))
        test['dataset'] = 'test'
        train = xml_collector(os.path.join(unet,'9999','train','results'))
        train['dataset'] = 'train'
        val = xml_collector(os.path.join(unet,'9999','val','results'))
        val['dataset'] = 'val'
        full = p.concat([test,val,train])
        full['utility_run'] = os.path.basename(unet)
        combined.append(full)
    result = p.concat(combined)
    result["Dice Coefficient (F1-Measure)"] = p.to_numeric(result["Dice Coefficient (F1-Measure)"])
    result["Hausdorff Distance"] = p.to_numeric(result["Hausdorff Distance"])
    return result

def create_nii_images(truth_path, synthetic_path,filename):
    
    truth_label=nib.load(truth_path).get_fdata()
    truth_img = nib.load(truth_path.replace('label','img')).get_fdata()
    truth_mask = nib.load(truth_path.replace('label','mask')).get_fdata()

    synthetic_label=nib.load(synthetic_path).get_data()

    fig, ax = plt.subplots(1,3,figsize=(6.5,6.5))
    
    ax[0].set_xticklabels([])
    ax[0].set_yticklabels([])
    #ax[0].axis('off')
    ax[0].set_aspect('equal')
    ax[0].set_xlabel('Image')  
    
    ax[1].set_xticklabels([])
    ax[1].set_yticklabels([])
    #ax[1].axis('off')
    ax[1].set_aspect('equal')
    ax[1].set_xlabel('Truth')  

    ax[2].set_xticklabels([])
    ax[2].set_yticklabels([])
    #ax[2].axis('off')
    ax[2].set_aspect('equal')
    ax[2].set_xlabel('Prediction')  

    logger.info(f'Synthetic Max: {np.max(np.rot90(synthetic_label[:,:,synthetic_label.shape[2]//2],3))}')

    ax[0].imshow(np.rot90(truth_img[:,:,truth_img.shape[2]//3],3), cmap='gray')
    ax[1].imshow(np.rot90(truth_label[:,:,truth_label.shape[2]//3],3), cmap='gray')
    ax[2].imshow(np.rot90(synthetic_label[:,:,synthetic_label.shape[2]//3],3), cmap='gray')
    ax[1].autoscale(False)
    plt.margins(0,0)
    plt.subplots_adjust(top = 1, bottom = 0, right = 1, left = 0, 
            hspace = 0, wspace = 0.1)
    #plt.savefig('t.jpg', bbox_inches='tight',pad_inches=0.0)
    plt.savefig(filename, bbox_inches='tight',pad_inches=0.0)
    plt.close()

def fix_path(path):
    return path
    #return path.replace('/data/users/hirzelma/work/','/home/manuel/')

def xml_collector(path):
    files = os.listdir(path)
    aslist = []
    for file in files:
        collect = {}
        xml = open(os.path.join(path,file),'r').read()
        root = ET.XML(xml)  # Parse XML
        for i, child in enumerate(root):
            if child.tag == 'fixed-image':
                collect['truth'] = fix_path(child.attrib['filename'])
                pass
            if child.tag == 'moving-image':
                collect['synthetic'] = fix_path(child.attrib['filename'])
                pass
            if child.tag == 'metrics':
                for subchild in child:
                    collect[subchild.attrib['name']] =  subchild.attrib['value']
        aslist.append(collect)
    return p.DataFrame(aslist)

class SummaryModel:
    def __init__(self):
        self.base_path = ""
        self.project_path = ""
        self.tmp_path = ""

        self.name = ""
        self.gan_parameters_html = ""
        self.gan_config = None
        self.privacy_epsilon = ""
        self.privacy_delta = ""
        self.gan_loss_path = ""
        self.synthetic_image_path = ""
        self.unet_summary_table_html = ""
        self.unet_validation_html = ""
        self.unet_test_images_paths = []

        self.distances_table_html = ""
        self.distances_plots__closest_paths = []
        self.distances_plots_random_paths = []
        self.distances_histogram_path = ""
    
        self.configuration_path = ""
        self.utility_path = ""
        self.distances_path = ""
        self.unet_paths = []
        self.registry = []


    def generate_path_structure(self):
        self.synthetic_image_path = os.path.join(self.project_path,'synthetic','synthetic.jpg')
        
        self.registry.append(GANParams)
        self.registry.append(DPCalc)
        if os.path.exists(self.synthetic_image_path):
            logger.info(f'Found synthetic images for {self.name}')
            self.registry.append(SyntheticImage)

        self.configuration_path = os.path.join(self.project_path,'configuration.yaml')
        self.registry.append(GANLossPlot)

        self.utility_path = os.path.join(self.project_path,'utility')
        for u in os.listdir(self.utility_path):
            path = os.path.join(self.utility_path,u)
            if os.path.exists(os.path.join(path,'9999','test','results','0069_label.nii_.xml')):
                self.unet_paths.append(path)

            if os.path.exists(os.path.join(path,'9999','test','results','0001_label.nii_.xml')):
                self.unet_paths.append(path)
        
        logger.info(f'Found {len(self.unet_paths)} trained U-Nets for {self.name}')
        if len(self.unet_paths)>0:
            self.registry.append(UnetTable)
            self.registry.append(UnetBrainPlots)

        if os.path.exists(os.path.join(self.project_path,'synthetic','distances','hist.jpg')):
            self.distances_path = os.path.join(self.project_path,'synthetic','distances')
            logger.info(f'Found distances for {self.name}')
            self.registry.append(DistancesData)

        for builder in self.registry:
            try:
                builder.build(self)
            except Exception as e:
                logger.error(e)
        
                
    def generate_html(self):
        logger.info('Generating HTML markup.')
        with open('framework/template.html','r') as f:
            html = f.read()

        gen = ''
        for builder in self.registry:
            gen = gen + builder.html(self)


        html = html.replace('@CONTENT@',gen)
        
        random = np.random.randint(0,1000)

        with open(f'{random}.html','w') as f:
            f.write(html)
        
        general = {}
        general['name'] = self.name
        general['date'] = datetime.datetime.now()

        env = Environment(loader=FileSystemLoader(searchpath=''))
        template = env.get_template(f'{random}.html')

        html_out = template.render(general)
        #pdfkit.from_string(html_out, os.path.join(self.base_path,'reports',self.name+"-report.pdf"))
        HTML(string = html_out).write_pdf(os.path.join(self.base_path,'reports',self.name+"-report.pdf"))
        logger.info('Created a pdf from the HTML markup.')
        os.remove(f'{random}.html')
        logger.info('Removed temporary files and folders.')
        logger.info(f'Report generated: {os.path.join(self.base_path,"reports",self.name+"-report.pdf")}')
